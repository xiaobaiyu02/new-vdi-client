#!/usr/bin/env node

/**
 * Module dependencies.
 */

var config;
try {
  config = require("../config");
} catch(e) {
  console.log("项目根目录中未找到 config.json");
  process.exit(1);
}
var app = require('./app');
var debug = require('debug')('new-vdi-client:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(config.port);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

require("./ws")(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, config.host);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  getAllIps().forEach(function(ip){
    console.log('server started at http://' + ip + ':' + addr.port);
  });
}

function getAllIps(){
  var ethernets = require("os").networkInterfaces();
  var list = [];
  Object.keys(ethernets).forEach(function(name){
    var interfaces = ethernets[name];
    interfaces.forEach(function(i){
      if(i.family === "IPv4") {
        list.push(i.address);
      }
    });
  });
  return list;
}